###
# Initially copied from
# https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml
#
# Original comment follows.
###
###
# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
###

###
# Important notes on GitHub actions:
#
# - We only get 2,000 free minutes a month
# - We only get 500MB of artifact storage
# - Cache storage is limited to 7 days and 5GB.
# - macOS minutes are 10x as expensive as Linux minutes
# - windows minutes are twice as expensive.
#
# So keep those workflows light.
#
# In December 2020, github only supports x86/64. If we wanted to test
# gevent on other architectures, we might be able to use docker
# emulation, but there's no native support.
#
# Another major downside: You can't just re-run the job for one part
# of the matrix. So if there's a transient test failure that hit, say, 3.8,
# to get a clean run every version of Python runs again. That's bad.
# https://github.community/t/ability-to-rerun-just-a-single-job-in-a-workflow/17234/65

name: gevent build and publish


# Triggers the workflow on push or pull request events
on: [push]
#on: [push, pull_request]
# Limiting to particular branches might be helpful to conserve minutes.
#on:
  # push:
  #   branches: [ $default-branch ]
  # pull_request:
  #   branches: [ $default-branch ]

env:
  # Weirdly, this has to be a top-level key, not ``defaults.env``
  PYTHONHASHSEED: 8675309
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  GEVENTSETUP_EV_VERIFY: 1
  # Disable some warnings produced by libev especially and also some Cython generated code.
  # These are shared between GCC and clang so it must be a minimal set.
  # TODO: Figure out how to set env vars per platform without resorting to inline scripting.
  # Note that changing the value of these variables invalidates configure caches
  CFLAGS: -Ofast -pipe -Wno-strict-aliasing -Wno-comment
  CPPFLAGS: -DEV_VERIFY=1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # travis repo settings.
  TWINE_USERNAME: __token__
  ###
  # caching
  ###
  CCACHE_DIR: ~/.ccache
  CC: "ccache gcc"
  CCACHE_NOCPP2: true
  CCACHE_SLOPPINESS: file_macro,time_macros,include_file_ctime,include_file_mtime
  CCACHE_NOHASHDIR: true
  _REPO: levo-pyreg
  PROJECT_ID: levo-platform
  _REGION: us
  #


jobs:

  linux_wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          # Python version, docker image, short name
          - ["3.9", "quay.io/pypa/manylinux2010_x86_64", "manylinux"]
#          - ["3.9", "quay.io/pypa/musllinux_1_1_x86_64", "musllinux"]
    name: ${{ matrix.config[2] }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.config[0] }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config[0] }}
      - name: Cache ~/.ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache/
          key: ${{ runner.os }}-ccache_${{ matrix.config[2] }}-${{ matrix.config[0] }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        # Be careful not to accidentally share caches. The wheel names
        # may be the same (e.g.,
        # psutil-5.8.0-cp310-cp310-linux_x86_64.whl) but they aren't
        # compatible across glibc/musl.
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip_${{ matrix.config[2] }}_x8664-${{ matrix.config[0] }}

      - name: Update pip
        run: pip install -U pip
      - name: Build and test gevent
        # An alternate way to do this is to run the container directly with a uses:
        # and then the script runs inside it. That may work better with caching.
        # See https://github.com/pyca/bcrypt/blob/f6b5ee2eda76d077c531362ac65e16f045cf1f29/.github/workflows/wheel-builder.yml
        # The 2010 image is the last one that comes with Python 2.7,
        # and only up through the tag 2021-02-06-3d322a5.
        # Unfortunately, this does not include Python 3.10, and the
        # images that include Python 3.10 don't have 2.7. Sigh.
        env:
          DOCKER_IMAGE: ${{ matrix.config[1] }}
          GEVENT_MANYLINUX_NAME: ${{ matrix.config[2] }}

        run: scripts/releases/make-manylinux
      - name: Upload gevent wheels
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*whl
          name: ${{ matrix.config[2] }}_x86_64_wheels.zip
      - name: Restore pip cache permissions
        run: sudo chown -R $(whoami) ${{ steps.pip-cache.outputs.dir }}
      - name: Publish the binary wheel to GCP Artifactory
        run: |
         pip install --upgrade twine wheel
         printf "[distutils]\nindex-servers = \n    ${_REPO}\n\n[${_REPO}]\nrepository: https://${_REGION}-python.pkg.dev/${PROJECT_ID}/${_REPO}/\nusername: _json_key_base64\npassword: ${{ secrets.GCP_REGISTRY_PASSWORD }}" > ~/.pypirc
        #           mkdir -p ~/.config/pip
        #           printf "[global]\nextra-index-url = https://_json_key_base64:${{ secrets.GCP_REGISTRY_PASSWORD }}@${_REGION}-python.pkg.dev/${PROJECT_ID}/${_REPO}/simple/\ntrusted-host = ${_REGION}-python.pkg.dev\n" > ~/.config/pip/pip.conf
         twine upload -r levo-pyreg wheelhouse/* --verbose

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
#        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/

# TODO:
# * Use YAML syntax to share snippets, like the old .travis.yml did
